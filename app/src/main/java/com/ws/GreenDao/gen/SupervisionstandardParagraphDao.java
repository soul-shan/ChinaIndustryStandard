package com.ws.GreenDao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ws.GreenDao.SupervisionstandardParagraph;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUPERVISIONSTANDARD_PARAGRAPH".
*/
public class SupervisionstandardParagraphDao extends AbstractDao<SupervisionstandardParagraph, Void> {

    public static final String TABLENAME = "SUPERVISIONSTANDARD_PARAGRAPH";

    /**
     * Properties of entity SupervisionstandardParagraph.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", false, "ID");
        public final static Property Chapterid = new Property(1, Integer.class, "chapterid", false, "CHAPTERID");
        public final static Property Partid = new Property(2, Integer.class, "partid", false, "PARTID");
        public final static Property Paragraphid = new Property(3, Integer.class, "paragraphid", false, "PARAGRAPHID");
        public final static Property Paragraphname = new Property(4, String.class, "paragraphname", false, "PARAGRAPHNAME");
        public final static Property Paragraph = new Property(5, String.class, "paragraph", false, "PARAGRAPH");
        public final static Property Nspectionquantity = new Property(6, String.class, "nspectionquantity", false, "NSPECTIONQUANTITY");
        public final static Property Inspectionmethod = new Property(7, String.class, "inspectionmethod", false, "INSPECTIONMETHOD");
    }


    public SupervisionstandardParagraphDao(DaoConfig config) {
        super(config);
    }
    
    public SupervisionstandardParagraphDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUPERVISIONSTANDARD_PARAGRAPH\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"CHAPTERID\" INTEGER," + // 1: chapterid
                "\"PARTID\" INTEGER," + // 2: partid
                "\"PARAGRAPHID\" INTEGER," + // 3: paragraphid
                "\"PARAGRAPHNAME\" TEXT," + // 4: paragraphname
                "\"PARAGRAPH\" TEXT," + // 5: paragraph
                "\"NSPECTIONQUANTITY\" TEXT," + // 6: nspectionquantity
                "\"INSPECTIONMETHOD\" TEXT);"); // 7: inspectionmethod
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUPERVISIONSTANDARD_PARAGRAPH\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SupervisionstandardParagraph entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer chapterid = entity.getChapterid();
        if (chapterid != null) {
            stmt.bindLong(2, chapterid);
        }
 
        Integer partid = entity.getPartid();
        if (partid != null) {
            stmt.bindLong(3, partid);
        }
 
        Integer paragraphid = entity.getParagraphid();
        if (paragraphid != null) {
            stmt.bindLong(4, paragraphid);
        }
 
        String paragraphname = entity.getParagraphname();
        if (paragraphname != null) {
            stmt.bindString(5, paragraphname);
        }
 
        String paragraph = entity.getParagraph();
        if (paragraph != null) {
            stmt.bindString(6, paragraph);
        }
 
        String nspectionquantity = entity.getNspectionquantity();
        if (nspectionquantity != null) {
            stmt.bindString(7, nspectionquantity);
        }
 
        String inspectionmethod = entity.getInspectionmethod();
        if (inspectionmethod != null) {
            stmt.bindString(8, inspectionmethod);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SupervisionstandardParagraph entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer chapterid = entity.getChapterid();
        if (chapterid != null) {
            stmt.bindLong(2, chapterid);
        }
 
        Integer partid = entity.getPartid();
        if (partid != null) {
            stmt.bindLong(3, partid);
        }
 
        Integer paragraphid = entity.getParagraphid();
        if (paragraphid != null) {
            stmt.bindLong(4, paragraphid);
        }
 
        String paragraphname = entity.getParagraphname();
        if (paragraphname != null) {
            stmt.bindString(5, paragraphname);
        }
 
        String paragraph = entity.getParagraph();
        if (paragraph != null) {
            stmt.bindString(6, paragraph);
        }
 
        String nspectionquantity = entity.getNspectionquantity();
        if (nspectionquantity != null) {
            stmt.bindString(7, nspectionquantity);
        }
 
        String inspectionmethod = entity.getInspectionmethod();
        if (inspectionmethod != null) {
            stmt.bindString(8, inspectionmethod);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SupervisionstandardParagraph readEntity(Cursor cursor, int offset) {
        SupervisionstandardParagraph entity = new SupervisionstandardParagraph( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // chapterid
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // partid
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // paragraphid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // paragraphname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // paragraph
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nspectionquantity
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // inspectionmethod
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SupervisionstandardParagraph entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setChapterid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPartid(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setParagraphid(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setParagraphname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setParagraph(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNspectionquantity(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInspectionmethod(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SupervisionstandardParagraph entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SupervisionstandardParagraph entity) {
        return null;
    }

    @Override
    public boolean hasKey(SupervisionstandardParagraph entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
